{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { bedTokenAddress, btc2xfliTokenAddress, daiTokenAddress, daiTokenPolygonAddress, dataTokenAddress, dataTokenPolygonAddress, dpiTokenAddress, dpiTokenPolygonAddress, wlkrTokenAddress, // added WLKR\nwlkrTokenPolygonAddress, // added WLKR\nwlkrrTokenAddress, // added WLKRR\nwlkrrTokenPolygonAddress, // added WLKRR\ncndlTokenAddress, // added CNDL\ncndlTokenPolygonAddress, // added CNDL\neth2xflipTokenAddress, eth2xfliTokenAddress, farmTwoAddress, gmiStakingRewardsAddress, gmiTokenAddress, gmiTokenPolygonAddress, iethflipTokenAddress, imaticflipTokenAddress, indexTokenAddress, matic2xflipTokenAddress, mviStakingRewardsAddress, mviTokenAddress, mviTokenPolygonAddress, stakingRewardsAddress, uniswapEthDpiLpTokenAddress, uniswapEthMviLpTokenAddress, usdcTokenAddress, usdcTokenPolygonAddress, wethTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo';\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking';\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking';\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index';\nimport Context from './Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = ({\n  children\n}) => {\n  _s();\n\n  const [ethBalance, setEthBalance] = useState();\n  const [indexBalance, setIndexBalance] = useState();\n  const [dpiBalance, setDpiBalance] = useState();\n  const [wlkrBalance, setWlkrBalance] = useState(); // Added WLKR\n\n  const [cndlBalance, setCndlBalance] = useState(); // Added WLKRR\n\n  const [wlkrrBalance, setWlkrrBalance] = useState(); // Added CNDL\n\n  const [ethfliBalance, setEthFliBalance] = useState();\n  const [btcfliBalance, setBtcFliBalance] = useState();\n  const [mviBalance, setMviBalance] = useState();\n  const [daiBalance, setDaiBalance] = useState();\n  const [usdcBalance, setUsdcBalance] = useState();\n  const [bedBalance, setBedBalance] = useState();\n  const [dataBalance, setDataBalance] = useState();\n  const [gmiBalance, setGmiBalance] = useState(); // polygon balances\n\n  const [wethBalancePolygon, setWethBalancePolygon] = useState();\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState();\n  const [wlkrBalancePolygon, setWlkrBalancePolygon] = useState(); // Added WLKR\n\n  const [wlkrrBalancePolygon, setWlkrrBalancePolygon] = useState(); // Added WLKRR\n\n  const [cndlBalancePolygon, setCndlBalancePolygon] = useState(); // Added CNDL\n\n  const [ethflipBalance, setEthFlipBalance] = useState();\n  const [mviBalancePolygon, setMviBalancePolygon] = useState();\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState();\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState();\n  const [dataBalancePolygon, setDataBalancePolygon] = useState();\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState();\n  const [iethFlipBalance, setIEthFlipBalance] = useState();\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState();\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState(); // LP Tokens Balances\n\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] = useState();\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] = useState(); // Legacy DPI LM Program\n\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] = useState();\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] = useState(); // Current DPI LM Program\n\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState();\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] = useState(); // Current MVI LM Program\n\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] = useState();\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] = useState(); // GMI Staking Program\n\n  const [stakedGmiBalance, setStakedGmiBalance] = useState();\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] = useState();\n  const {\n    account,\n    ethereum,\n    status,\n    chainId\n  } = useWallet();\n  const fetchBalances = useCallback(async (userAddress, provider) => {\n    if (!indexTokenAddress || !dpiTokenAddress || !dpiTokenPolygonAddress || !wlkrTokenAddress || // Added WLKR\n    !wlkrTokenPolygonAddress || // Added WLKR Polygon\n    !wlkrrTokenAddress || // Added WLKRR\n    !wlkrrTokenPolygonAddress || // Added WLKRR Polygon\n    !cndlTokenAddress || // // Added CNDL\n    !cndlTokenPolygonAddress || // Added CNDL Polygon\n    !eth2xfliTokenAddress || !eth2xflipTokenAddress || !btc2xfliTokenAddress || !mviTokenAddress || !mviTokenPolygonAddress || !daiTokenAddress || !daiTokenPolygonAddress || !usdcTokenAddress || !usdcTokenPolygonAddress || !bedTokenAddress || !gmiTokenAddress || !dataTokenAddress || !dataTokenPolygonAddress || !gmiTokenPolygonAddress || !uniswapEthDpiLpTokenAddress || !uniswapEthMviLpTokenAddress || !stakingRewardsAddress || !gmiStakingRewardsAddress || !farmTwoAddress || !mviStakingRewardsAddress || !wethTokenPolygonAddress || !iethflipTokenAddress || !matic2xflipTokenAddress || !imaticflipTokenAddress) {\n      throw new Error('A token address is not defined. Please check your .env to confirm all token addresses are defined.');\n    }\n\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([getEthBalance(provider, userAddress), getBalance(provider, indexTokenAddress, userAddress), getBalance(provider, dpiTokenAddress, userAddress), getBalance(provider, wlkrTokenAddress, userAddress), // Added WLKR\n      getBalance(provider, wlkrrTokenAddress, userAddress), // Added WLKRR\n      getBalance(provider, cndlTokenAddress, userAddress), // Added CNDL\n      getBalance(provider, eth2xfliTokenAddress, userAddress), getBalance(provider, btc2xfliTokenAddress, userAddress), getBalance(provider, mviTokenAddress, userAddress), getBalance(provider, daiTokenAddress, userAddress), getBalance(provider, usdcTokenAddress, userAddress), getBalance(provider, bedTokenAddress, userAddress), getBalance(provider, dataTokenAddress, userAddress), getBalance(provider, gmiTokenAddress, userAddress), // LP Token Balances\n      getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress), getBalance(provider, uniswapEthMviLpTokenAddress, userAddress), // Legacy DPI LM Program Balances\n      getBalance(provider, stakingRewardsAddress, userAddress), getEarnedIndexTokenQuantity(provider, userAddress), // Current DPI LM Program Balances\n      getBalance(provider, farmTwoAddress, userAddress), getEarnedFarmTwoBalance(provider, userAddress), // GMI staking Balances\n      getBalance(provider, gmiStakingRewardsAddress, userAddress), getGmiRewardsBalance(provider, userAddress)]); // Current MVI LM Program Balances\n\n      const balances2 = await Promise.all([getBigNumBalance(provider, mviStakingRewardsAddress, userAddress), getMviRewardsBalance(provider, userAddress)]); // mainnet\n\n      setEthBalance(new BigNumber(balances[0]));\n      setIndexBalance(new BigNumber(balances[1]));\n      setDpiBalance(new BigNumber(balances[2]));\n      setWlkrBalance(new BigNumber(balances[3])); // Added WLKR\n\n      setWlkrrBalance(new BigNumber(balances[4])); // Added WLKRR\n\n      setCndlBalance(new BigNumber(balances[5])); // Added CNDL\n\n      setEthFliBalance(new BigNumber(balances[6]));\n      setBtcFliBalance(new BigNumber(balances[7]));\n      setMviBalance(new BigNumber(balances[8]));\n      setDaiBalance(new BigNumber(balances[9]));\n      setUsdcBalance(new BigNumber(balances[10]));\n      setBedBalance(new BigNumber(balances[11]));\n      setDataBalance(new BigNumber(balances[12]));\n      setGmiBalance(new BigNumber(balances[13]));\n      setUniswapEthDpiLpBalance(new BigNumber(balances[14]));\n      setUniswapEthMviLpBalance(new BigNumber(balances[15]));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(balances[16]));\n      setUnharvestedIndexBalance(new BigNumber(balances[17]));\n      setStakedFarmTwoBalance(new BigNumber(balances[18]));\n      setUnharvestedFarmTwoBalance(new BigNumber(balances[19]));\n      setStakedGmiBalance(new BigNumber(balances[20]));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(balances[21])); // BN Balances\n\n      setStakedUniswapEthMviLpBalance(balances2[0]);\n      setUnharvestedMviRewardsBalance(balances2[1]);\n    } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n      const balances = await Promise.all([//polygon\n      getBalance(provider, wethTokenPolygonAddress, userAddress), getBalance(provider, dpiTokenPolygonAddress, userAddress), getBalance(provider, wlkrTokenPolygonAddress, userAddress), // Added WLKR\n      getBalance(provider, wlkrrTokenPolygonAddress, userAddress), // Added WLKRR\n      getBalance(provider, cndlTokenPolygonAddress, userAddress), // Added CNDL\n      getBalance(provider, eth2xflipTokenAddress, userAddress), getBalance(provider, mviTokenPolygonAddress, userAddress), getBalance(provider, daiTokenPolygonAddress, userAddress), getBalance(provider, usdcTokenPolygonAddress, userAddress), getBalance(provider, dataTokenPolygonAddress, userAddress), getBalance(provider, gmiTokenPolygonAddress, userAddress), getBalance(provider, iethflipTokenAddress, userAddress), getBalance(provider, imaticflipTokenAddress, userAddress), getBalance(provider, matic2xflipTokenAddress, userAddress)]); // polygon\n\n      setWethBalancePolygon(new BigNumber(balances[0]));\n      setDpiBalancePolygon(new BigNumber(balances[1]));\n      setWlkrBalancePolygon(new BigNumber(balances[2])); // Added WLKR\n\n      setWlkrrBalancePolygon(new BigNumber(balances[3])); // Added WLKRR\n\n      setCndlBalancePolygon(new BigNumber(balances[4])); // Added CNDL\n\n      setEthFlipBalance(new BigNumber(balances[5]));\n      setMviBalancePolygon(new BigNumber(balances[6]));\n      setDaiBalancePolygon(new BigNumber(balances[7]));\n      setUsdcBalancePolygon(new BigNumber(balances[8]));\n      setDataBalancePolygon(new BigNumber(balances[9]));\n      setGmiBalancePolygon(new BigNumber(balances[10]));\n      setIEthFlipBalance(new BigNumber(balances[11]));\n      setIMaticFlipBalance(new BigNumber(balances[12]));\n      setMaticFlipBalance(new BigNumber(balances[13]));\n    }\n  }, [chainId, setEthBalance, setWethBalancePolygon, setIndexBalance, setDpiBalance, setWlkrBalance, // Added WLKR\n  setWlkrrBalance, // Added WLKRR\n  setCndlBalance, // Added CNDL\n  setEthFliBalance, setEthFlipBalance, setBtcFliBalance, setMviBalance, setBedBalance, setGmiBalance, setDataBalance, setDataBalancePolygon, setGmiBalancePolygon, setUniswapEthDpiLpBalance, setUniswapEthMviLpBalance, setStakedUniswapEthDpiLpBalance, setUnharvestedIndexBalance, setStakedFarmTwoBalance, setUnharvestedFarmTwoBalance, setStakedUniswapEthMviLpBalance, setUnharvestedMviRewardsBalance, setStakedGmiBalance, setUnharvestedIndexFromGmiBalance, setMaticFlipBalance, setIMaticFlipBalance, setIEthFlipBalance]);\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0));\n      setWethBalancePolygon(new BigNumber(0));\n      setIndexBalance(new BigNumber(0));\n      setDpiBalance(new BigNumber(0));\n      setDpiBalancePolygon(new BigNumber(0));\n      setWlkrBalance(new BigNumber(0)); // Added WLKR\n\n      setWlkrBalancePolygon(new BigNumber(0)); // Added WLKR\n\n      setWlkrrBalance(new BigNumber(0)); // Added WLKRR\n\n      setWlkrrBalancePolygon(new BigNumber(0)); // Added WLKRR\n\n      setCndlBalance(new BigNumber(0)); // Added CNDL\n\n      setCndlBalancePolygon(new BigNumber(0)); // Added CNDL\n\n      setEthFliBalance(new BigNumber(0));\n      setEthFlipBalance(new BigNumber(0));\n      setBtcFliBalance(new BigNumber(0));\n      setMviBalance(new BigNumber(0));\n      setMviBalancePolygon(new BigNumber(0));\n      setBedBalance(new BigNumber(0));\n      setGmiBalance(new BigNumber(0));\n      setDaiBalance(new BigNumber(0));\n      setDaiBalancePolygon(new BigNumber(0));\n      setUsdcBalance(new BigNumber(0));\n      setUsdcBalancePolygon(new BigNumber(0));\n      setUniswapEthDpiLpBalance(new BigNumber(0));\n      setUniswapEthMviLpBalance(new BigNumber(0));\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0));\n      setUnharvestedIndexBalance(new BigNumber(0));\n      setStakedFarmTwoBalance(new BigNumber(0));\n      setUnharvestedFarmTwoBalance(new BigNumber(0));\n      setStakedUniswapEthMviLpBalance(new BigNumber(0));\n      setUnharvestedMviRewardsBalance(new BigNumber(0));\n      setDataBalance(new BigNumber(0));\n      setDataBalancePolygon(new BigNumber(0));\n      setStakedGmiBalance(new BigNumber(0));\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0));\n      setGmiBalancePolygon(new BigNumber(0));\n      setMaticFlipBalance(new BigNumber(0));\n      setIMaticFlipBalance(new BigNumber(0));\n      setIEthFlipBalance(new BigNumber(0));\n    }\n  }, [status]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum);\n      let refreshInterval = setInterval(() => fetchBalances(account, ethereum), 10000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [account, ethereum, fetchBalances]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      ethBalance,\n      wethBalancePolygon,\n      wlkrBalance,\n      // Added WLKR\n      wlkrBalancePolygon,\n      // Added WLKR\n      wlkrrBalance,\n      // Added WLKRR\n      wlkrrBalancePolygon,\n      // Added WLKRR\n      cndlBalance,\n      // Added CNDL\n      cndlBalancePolygon,\n      // Added CNDL\n      ethfliBalance,\n      ethflipBalance,\n      btcfliBalance,\n      daiBalance,\n      daiBalancePolygon,\n      usdcBalance,\n      usdcBalancePolygon,\n      bedBalance,\n      gmiBalance,\n      dataBalance,\n      dataBalancePolygon,\n      uniswapEthDpiLpBalance,\n      uniswapEthMviLpBalance,\n      stakedUniswapEthDpiLpBalance,\n      unharvestedIndexBalance,\n      stakedFarmTwoBalance,\n      unharvestedFarmTwoBalance,\n      stakedUniswapEthMviLpBalance,\n      unharvestedMviRewardsBalance,\n      stakedGmiBalance,\n      unharvestedIndexFromGmiBalance,\n      gmiBalancePolygon,\n      maticFlipBalancePolygon,\n      imaticFlipBalancePolygon,\n      iethFlipBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Provider, \"JOikLkj+O9HV2KHMADsFTxCrbh0=\", false, function () {\n  return [useWallet];\n});\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/Balances/Provider.tsx"],"names":["React","useCallback","useEffect","useState","bedTokenAddress","btc2xfliTokenAddress","daiTokenAddress","daiTokenPolygonAddress","dataTokenAddress","dataTokenPolygonAddress","dpiTokenAddress","dpiTokenPolygonAddress","wlkrTokenAddress","wlkrTokenPolygonAddress","wlkrrTokenAddress","wlkrrTokenPolygonAddress","cndlTokenAddress","cndlTokenPolygonAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","farmTwoAddress","gmiStakingRewardsAddress","gmiTokenAddress","gmiTokenPolygonAddress","iethflipTokenAddress","imaticflipTokenAddress","indexTokenAddress","matic2xflipTokenAddress","mviStakingRewardsAddress","mviTokenAddress","mviTokenPolygonAddress","stakingRewardsAddress","uniswapEthDpiLpTokenAddress","uniswapEthMviLpTokenAddress","usdcTokenAddress","usdcTokenPolygonAddress","wethTokenPolygonAddress","useWallet","getEarnedIndexTokenQuantity","getEarnedFarmTwoBalance","getGmiRewardsBalance","getMviRewardsBalance","BigNumber","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","getBalance","getBigNumBalance","getEthBalance","Context","Provider","children","ethBalance","setEthBalance","indexBalance","setIndexBalance","dpiBalance","setDpiBalance","wlkrBalance","setWlkrBalance","cndlBalance","setCndlBalance","wlkrrBalance","setWlkrrBalance","ethfliBalance","setEthFliBalance","btcfliBalance","setBtcFliBalance","mviBalance","setMviBalance","daiBalance","setDaiBalance","usdcBalance","setUsdcBalance","bedBalance","setBedBalance","dataBalance","setDataBalance","gmiBalance","setGmiBalance","wethBalancePolygon","setWethBalancePolygon","dpiBalancePolygon","setDpiBalancePolygon","wlkrBalancePolygon","setWlkrBalancePolygon","wlkrrBalancePolygon","setWlkrrBalancePolygon","cndlBalancePolygon","setCndlBalancePolygon","ethflipBalance","setEthFlipBalance","mviBalancePolygon","setMviBalancePolygon","daiBalancePolygon","setDaiBalancePolygon","usdcBalancePolygon","setUsdcBalancePolygon","dataBalancePolygon","setDataBalancePolygon","gmiBalancePolygon","setGmiBalancePolygon","iethFlipBalance","setIEthFlipBalance","maticFlipBalancePolygon","setMaticFlipBalance","imaticFlipBalancePolygon","setIMaticFlipBalance","uniswapEthDpiLpBalance","setUniswapEthDpiLpBalance","uniswapEthMviLpBalance","setUniswapEthMviLpBalance","stakedUniswapEthDpiLpBalance","setStakedUniswapEthDpiLpBalance","unharvestedIndexBalance","setUnharvestedIndexBalance","stakedFarmTwoBalance","setStakedFarmTwoBalance","unharvestedFarmTwoBalance","setUnharvestedFarmTwoBalance","stakedUniswapEthMviLpBalance","setStakedUniswapEthMviLpBalance","unharvestedMviRewardsBalance","setUnharvestedMviRewardsBalance","stakedGmiBalance","setStakedGmiBalance","unharvestedIndexFromGmiBalance","setUnharvestedIndexFromGmiBalance","account","ethereum","status","chainId","fetchBalances","userAddress","provider","Error","balances","Promise","all","balances2","refreshInterval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport { provider } from 'web3-core'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  daiTokenAddress,\n  daiTokenPolygonAddress,\n  dataTokenAddress,\n  dataTokenPolygonAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress, // added WLKR\n  wlkrTokenPolygonAddress, // added WLKR\n  wlkrrTokenAddress, // added WLKRR\n  wlkrrTokenPolygonAddress, // added WLKRR\n  cndlTokenAddress, // added CNDL\n  cndlTokenPolygonAddress, // added CNDL\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  farmTwoAddress,\n  gmiStakingRewardsAddress,\n  gmiTokenAddress,\n  gmiTokenPolygonAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  indexTokenAddress,\n  matic2xflipTokenAddress,\n  mviStakingRewardsAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n  stakingRewardsAddress,\n  uniswapEthDpiLpTokenAddress,\n  uniswapEthMviLpTokenAddress,\n  usdcTokenAddress,\n  usdcTokenPolygonAddress,\n  wethTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { getEarnedIndexTokenQuantity as getEarnedFarmTwoBalance } from 'index-sdk/farmTwo'\nimport { getEarnedIndexTokenQuantity as getGmiRewardsBalance } from 'index-sdk/gmiStaking'\nimport { getEarnedIndexTokenQuantity as getMviRewardsBalance } from 'index-sdk/mviStaking'\nimport { getEarnedIndexTokenQuantity } from 'index-sdk/stake'\nimport BigNumber from 'utils/bignumber'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { getBalance, getBigNumBalance, getEthBalance } from 'utils/index'\n\nimport Context from './Context'\n\nconst Provider: React.FC = ({ children }) => {\n  const [ethBalance, setEthBalance] = useState<BigNumber>()\n  const [indexBalance, setIndexBalance] = useState<BigNumber>()\n  const [dpiBalance, setDpiBalance] = useState<BigNumber>()\n  const [wlkrBalance, setWlkrBalance] = useState<BigNumber>() // Added WLKR\n  const [cndlBalance, setCndlBalance] = useState<BigNumber>() // Added WLKRR\n  const [wlkrrBalance, setWlkrrBalance] = useState<BigNumber>() // Added CNDL\n  const [ethfliBalance, setEthFliBalance] = useState<BigNumber>()\n  const [btcfliBalance, setBtcFliBalance] = useState<BigNumber>()\n  const [mviBalance, setMviBalance] = useState<BigNumber>()\n  const [daiBalance, setDaiBalance] = useState<BigNumber>()\n  const [usdcBalance, setUsdcBalance] = useState<BigNumber>()\n  const [bedBalance, setBedBalance] = useState<BigNumber>()\n  const [dataBalance, setDataBalance] = useState<BigNumber>()\n  const [gmiBalance, setGmiBalance] = useState<BigNumber>()\n\n  // polygon balances\n  const [wethBalancePolygon, setWethBalancePolygon] = useState<BigNumber>()\n  const [dpiBalancePolygon, setDpiBalancePolygon] = useState<BigNumber>()\n  const [wlkrBalancePolygon, setWlkrBalancePolygon] = useState<BigNumber>() // Added WLKR\n  const [wlkrrBalancePolygon, setWlkrrBalancePolygon] = useState<BigNumber>() // Added WLKRR\n  const [cndlBalancePolygon, setCndlBalancePolygon] = useState<BigNumber>() // Added CNDL\n  const [ethflipBalance, setEthFlipBalance] = useState<BigNumber>()\n  const [mviBalancePolygon, setMviBalancePolygon] = useState<BigNumber>()\n  const [daiBalancePolygon, setDaiBalancePolygon] = useState<BigNumber>()\n  const [usdcBalancePolygon, setUsdcBalancePolygon] = useState<BigNumber>()\n  const [dataBalancePolygon, setDataBalancePolygon] = useState<BigNumber>()\n  const [gmiBalancePolygon, setGmiBalancePolygon] = useState<BigNumber>()\n  const [iethFlipBalance, setIEthFlipBalance] = useState<BigNumber>()\n  const [maticFlipBalancePolygon, setMaticFlipBalance] = useState<BigNumber>()\n  const [imaticFlipBalancePolygon, setIMaticFlipBalance] = useState<BigNumber>()\n\n  // LP Tokens Balances\n  const [uniswapEthDpiLpBalance, setUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [uniswapEthMviLpBalance, setUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n\n  // Legacy DPI LM Program\n  const [stakedUniswapEthDpiLpBalance, setStakedUniswapEthDpiLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedIndexBalance, setUnharvestedIndexBalance] =\n    useState<BigNumber>()\n\n  // Current DPI LM Program\n  const [stakedFarmTwoBalance, setStakedFarmTwoBalance] = useState<BigNumber>()\n  const [unharvestedFarmTwoBalance, setUnharvestedFarmTwoBalance] =\n    useState<BigNumber>()\n\n  // Current MVI LM Program\n  const [stakedUniswapEthMviLpBalance, setStakedUniswapEthMviLpBalance] =\n    useState<BigNumber>()\n  const [unharvestedMviRewardsBalance, setUnharvestedMviRewardsBalance] =\n    useState<BigNumber>()\n\n  // GMI Staking Program\n  const [stakedGmiBalance, setStakedGmiBalance] = useState<BigNumber>()\n  const [unharvestedIndexFromGmiBalance, setUnharvestedIndexFromGmiBalance] =\n    useState<BigNumber>()\n\n  const { account, ethereum, status, chainId } = useWallet()\n\n  const fetchBalances = useCallback(\n    async (userAddress: string, provider: provider) => {\n      if (\n        !indexTokenAddress ||\n        !dpiTokenAddress ||\n        !dpiTokenPolygonAddress ||\n        !wlkrTokenAddress || // Added WLKR\n        !wlkrTokenPolygonAddress || // Added WLKR Polygon\n        !wlkrrTokenAddress || // Added WLKRR\n        !wlkrrTokenPolygonAddress || // Added WLKRR Polygon\n        !cndlTokenAddress || // // Added CNDL\n        !cndlTokenPolygonAddress || // Added CNDL Polygon\n        !eth2xfliTokenAddress ||\n        !eth2xflipTokenAddress ||\n        !btc2xfliTokenAddress ||\n        !mviTokenAddress ||\n        !mviTokenPolygonAddress ||\n        !daiTokenAddress ||\n        !daiTokenPolygonAddress ||\n        !usdcTokenAddress ||\n        !usdcTokenPolygonAddress ||\n        !bedTokenAddress ||\n        !gmiTokenAddress ||\n        !dataTokenAddress ||\n        !dataTokenPolygonAddress ||\n        !gmiTokenPolygonAddress ||\n        !uniswapEthDpiLpTokenAddress ||\n        !uniswapEthMviLpTokenAddress ||\n        !stakingRewardsAddress ||\n        !gmiStakingRewardsAddress ||\n        !farmTwoAddress ||\n        !mviStakingRewardsAddress ||\n        !wethTokenPolygonAddress ||\n        !iethflipTokenAddress ||\n        !matic2xflipTokenAddress ||\n        !imaticflipTokenAddress\n      ) {\n        throw new Error(\n          'A token address is not defined. Please check your .env to confirm all token addresses are defined.'\n        )\n      }\n      if (chainId && chainId === MAINNET_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          getEthBalance(provider, userAddress),\n          getBalance(provider, indexTokenAddress, userAddress),\n          getBalance(provider, dpiTokenAddress, userAddress),\n          getBalance(provider, wlkrTokenAddress, userAddress), // Added WLKR\n          getBalance(provider, wlkrrTokenAddress, userAddress), // Added WLKRR\n          getBalance(provider, cndlTokenAddress, userAddress), // Added CNDL\n          getBalance(provider, eth2xfliTokenAddress, userAddress),\n          getBalance(provider, btc2xfliTokenAddress, userAddress),\n          getBalance(provider, mviTokenAddress, userAddress),\n          getBalance(provider, daiTokenAddress, userAddress),\n          getBalance(provider, usdcTokenAddress, userAddress),\n          getBalance(provider, bedTokenAddress, userAddress),\n          getBalance(provider, dataTokenAddress, userAddress),\n          getBalance(provider, gmiTokenAddress, userAddress),\n\n          // LP Token Balances\n          getBalance(provider, uniswapEthDpiLpTokenAddress, userAddress),\n          getBalance(provider, uniswapEthMviLpTokenAddress, userAddress),\n\n          // Legacy DPI LM Program Balances\n          getBalance(provider, stakingRewardsAddress, userAddress),\n          getEarnedIndexTokenQuantity(provider, userAddress),\n\n          // Current DPI LM Program Balances\n          getBalance(provider, farmTwoAddress, userAddress),\n          getEarnedFarmTwoBalance(provider, userAddress),\n\n          // GMI staking Balances\n          getBalance(provider, gmiStakingRewardsAddress, userAddress),\n          getGmiRewardsBalance(provider, userAddress),\n        ])\n        // Current MVI LM Program Balances\n        const balances2 = await Promise.all([\n          getBigNumBalance(provider, mviStakingRewardsAddress, userAddress),\n          getMviRewardsBalance(provider, userAddress),\n        ])\n\n        // mainnet\n        setEthBalance(new BigNumber(balances[0]))\n        setIndexBalance(new BigNumber(balances[1]))\n        setDpiBalance(new BigNumber(balances[2]))\n        setWlkrBalance(new BigNumber(balances[3])) // Added WLKR\n        setWlkrrBalance(new BigNumber(balances[4])) // Added WLKRR\n        setCndlBalance(new BigNumber(balances[5])) // Added CNDL\n        setEthFliBalance(new BigNumber(balances[6]))\n        setBtcFliBalance(new BigNumber(balances[7]))\n        setMviBalance(new BigNumber(balances[8]))\n        setDaiBalance(new BigNumber(balances[9]))\n        setUsdcBalance(new BigNumber(balances[10]))\n        setBedBalance(new BigNumber(balances[11]))\n        setDataBalance(new BigNumber(balances[12]))\n        setGmiBalance(new BigNumber(balances[13]))\n        setUniswapEthDpiLpBalance(new BigNumber(balances[14]))\n        setUniswapEthMviLpBalance(new BigNumber(balances[15]))\n        setStakedUniswapEthDpiLpBalance(new BigNumber(balances[16]))\n        setUnharvestedIndexBalance(new BigNumber(balances[17]))\n        setStakedFarmTwoBalance(new BigNumber(balances[18]))\n        setUnharvestedFarmTwoBalance(new BigNumber(balances[19]))\n\n        setStakedGmiBalance(new BigNumber(balances[20]))\n        setUnharvestedIndexFromGmiBalance(new BigNumber(balances[21]))\n\n\n        // BN Balances\n        setStakedUniswapEthMviLpBalance(balances2[0])\n        setUnharvestedMviRewardsBalance(balances2[1])\n      } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId) {\n        const balances = await Promise.all([\n          //polygon\n          getBalance(provider, wethTokenPolygonAddress, userAddress),\n          getBalance(provider, dpiTokenPolygonAddress, userAddress),\n          getBalance(provider, wlkrTokenPolygonAddress, userAddress), // Added WLKR\n          getBalance(provider, wlkrrTokenPolygonAddress, userAddress), // Added WLKRR\n          getBalance(provider, cndlTokenPolygonAddress, userAddress), // Added CNDL\n          getBalance(provider, eth2xflipTokenAddress, userAddress),\n          getBalance(provider, mviTokenPolygonAddress, userAddress),\n          getBalance(provider, daiTokenPolygonAddress, userAddress),\n          getBalance(provider, usdcTokenPolygonAddress, userAddress),\n          getBalance(provider, dataTokenPolygonAddress, userAddress),\n          getBalance(provider, gmiTokenPolygonAddress, userAddress),\n          getBalance(provider, iethflipTokenAddress, userAddress),\n          getBalance(provider, imaticflipTokenAddress, userAddress),\n          getBalance(provider, matic2xflipTokenAddress, userAddress),\n        ])\n\n        // polygon\n        setWethBalancePolygon(new BigNumber(balances[0]))\n        setDpiBalancePolygon(new BigNumber(balances[1]))\n        setWlkrBalancePolygon(new BigNumber(balances[2])) // Added WLKR\n        setWlkrrBalancePolygon(new BigNumber(balances[3])) // Added WLKRR\n        setCndlBalancePolygon(new BigNumber(balances[4])) // Added CNDL\n        setEthFlipBalance(new BigNumber(balances[5]))\n        setMviBalancePolygon(new BigNumber(balances[6]))\n        setDaiBalancePolygon(new BigNumber(balances[7]))\n        setUsdcBalancePolygon(new BigNumber(balances[8]))\n        setDataBalancePolygon(new BigNumber(balances[9]))\n        setGmiBalancePolygon(new BigNumber(balances[10]))\n        setIEthFlipBalance(new BigNumber(balances[11]))\n        setIMaticFlipBalance(new BigNumber(balances[12]))\n        setMaticFlipBalance(new BigNumber(balances[13]))\n      }\n    },\n    [\n      chainId,\n      setEthBalance,\n      setWethBalancePolygon,\n      setIndexBalance,\n      setDpiBalance,\n      setWlkrBalance, // Added WLKR\n      setWlkrrBalance, // Added WLKRR\n      setCndlBalance, // Added CNDL\n      setEthFliBalance,\n      setEthFlipBalance,\n      setBtcFliBalance,\n      setMviBalance,\n      setBedBalance,\n      setGmiBalance,\n      setDataBalance,\n      setDataBalancePolygon,\n      setGmiBalancePolygon,\n      setUniswapEthDpiLpBalance,\n      setUniswapEthMviLpBalance,\n      setStakedUniswapEthDpiLpBalance,\n      setUnharvestedIndexBalance,\n      setStakedFarmTwoBalance,\n      setUnharvestedFarmTwoBalance,\n      setStakedUniswapEthMviLpBalance,\n      setUnharvestedMviRewardsBalance,\n      setStakedGmiBalance,\n      setUnharvestedIndexFromGmiBalance,\n      setMaticFlipBalance,\n      setIMaticFlipBalance,\n      setIEthFlipBalance,\n    ]\n  )\n\n  useEffect(() => {\n    if (status !== 'connected') {\n      setEthBalance(new BigNumber(0))\n      setWethBalancePolygon(new BigNumber(0))\n      setIndexBalance(new BigNumber(0))\n      setDpiBalance(new BigNumber(0))\n      setDpiBalancePolygon(new BigNumber(0))\n      setWlkrBalance(new BigNumber(0)) // Added WLKR\n      setWlkrBalancePolygon(new BigNumber(0)) // Added WLKR\n      setWlkrrBalance(new BigNumber(0)) // Added WLKRR\n      setWlkrrBalancePolygon(new BigNumber(0)) // Added WLKRR\n      setCndlBalance(new BigNumber(0)) // Added CNDL\n      setCndlBalancePolygon(new BigNumber(0)) // Added CNDL\n      setEthFliBalance(new BigNumber(0))\n      setEthFlipBalance(new BigNumber(0))\n      setBtcFliBalance(new BigNumber(0))\n      setMviBalance(new BigNumber(0))\n      setMviBalancePolygon(new BigNumber(0))\n      setBedBalance(new BigNumber(0))\n      setGmiBalance(new BigNumber(0))\n      setDaiBalance(new BigNumber(0))\n      setDaiBalancePolygon(new BigNumber(0))\n      setUsdcBalance(new BigNumber(0))\n      setUsdcBalancePolygon(new BigNumber(0))\n      setUniswapEthDpiLpBalance(new BigNumber(0))\n      setUniswapEthMviLpBalance(new BigNumber(0))\n      setStakedUniswapEthDpiLpBalance(new BigNumber(0))\n      setUnharvestedIndexBalance(new BigNumber(0))\n      setStakedFarmTwoBalance(new BigNumber(0))\n      setUnharvestedFarmTwoBalance(new BigNumber(0))\n      setStakedUniswapEthMviLpBalance(new BigNumber(0))\n      setUnharvestedMviRewardsBalance(new BigNumber(0))\n      setDataBalance(new BigNumber(0))\n      setDataBalancePolygon(new BigNumber(0))\n      setStakedGmiBalance(new BigNumber(0))\n      setUnharvestedIndexFromGmiBalance(new BigNumber(0))\n      setGmiBalancePolygon(new BigNumber(0))\n      setMaticFlipBalance(new BigNumber(0))\n      setIMaticFlipBalance(new BigNumber(0))\n      setIEthFlipBalance(new BigNumber(0))\n    }\n  }, [status])\n\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchBalances(account, ethereum)\n      let refreshInterval = setInterval(\n        () => fetchBalances(account, ethereum),\n        10000\n      )\n      return () => clearInterval(refreshInterval)\n    }\n  }, [account, ethereum, fetchBalances])\n\n  return (\n    <Context.Provider\n      value={{\n        ethBalance,\n        wethBalancePolygon,\n        wlkrBalance, // Added WLKR\n        wlkrBalancePolygon, // Added WLKR\n        wlkrrBalance, // Added WLKRR\n        wlkrrBalancePolygon, // Added WLKRR\n        cndlBalance, // Added CNDL\n        cndlBalancePolygon, // Added CNDL\n        ethfliBalance,\n        ethflipBalance,\n        btcfliBalance,\n        daiBalance,\n        daiBalancePolygon,\n        usdcBalance,\n        usdcBalancePolygon,\n        bedBalance,\n        gmiBalance,\n        dataBalance,\n        dataBalancePolygon,\n        uniswapEthDpiLpBalance,\n        uniswapEthMviLpBalance,\n        stakedUniswapEthDpiLpBalance,\n        unharvestedIndexBalance,\n        stakedFarmTwoBalance,\n        unharvestedFarmTwoBalance,\n        stakedUniswapEthMviLpBalance,\n        unharvestedMviRewardsBalance,\n        stakedGmiBalance,\n        unharvestedIndexFromGmiBalance,\n        gmiBalancePolygon,\n        maticFlipBalancePolygon,\n        imaticFlipBalancePolygon,\n        iethFlipBalance,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Provider\n"]},"metadata":{},"sourceType":"module"}