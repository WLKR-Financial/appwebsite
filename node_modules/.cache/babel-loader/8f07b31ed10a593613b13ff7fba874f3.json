{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/BuySell/BuySellProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { currencyTokens } from 'constants/currencyTokens';\nimport { BedIndex, Bitcoin2xFlexibleLeverageIndex, DataIndex, // Added WLKR\nEthereum2xFlexibleLeverageIndex, Ethereum2xFLIP, GmiIndex, IEthereumFLIP, IMaticFLIP, // Added WLKRR\nMatic2xFLIP // Added CNDL\n} from 'constants/productTokens';\nimport { TransactionStatusType } from 'contexts/TransactionWatcher';\nimport useBalances from 'hooks/useBalances';\nimport useTransactionWatcher from 'hooks/useTransactionWatcher';\nimport useWallet from 'hooks/useWallet';\nimport BigNumber from 'utils/bignumber';\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors';\nimport { fromWei, waitTransaction } from 'utils/index';\nimport trackReferral from 'utils/referralApi';\nimport { getZeroExTradeData } from 'utils/zeroExUtils';\nimport BuySellContext from './BuySellContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuySellProvider = ({\n  children\n}) => {\n  _s();\n\n  const [buySellToken, setBuySellToken] = useState('dpi');\n  const [isFetchingOrderData, setIsFetchingOrderData] = useState(false);\n  const [isUserBuying, setIsUserBuying] = useState(true);\n  const [activeField, setActiveField] = useState('currency');\n  const [buySellQuantity, setBuySellQuantity] = useState('');\n  const [selectedCurrency, setSelectedCurrency] = useState();\n  const [zeroExTradeData, setZeroExTradeData] = useState();\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const {\n    onSetTransactionId,\n    onSetTransactionStatus\n  } = useTransactionWatcher();\n  const {\n    ethBalance,\n    wethBalancePolygon,\n    dpiBalance,\n    dpiBalancePolygon,\n    mviBalance,\n    mviBalancePolygon,\n    bedBalance,\n    gmiBalance,\n    dataBalance,\n    dataBalancePolygon,\n    ethfliBalance,\n    ethflipBalance,\n    btcfliBalance,\n    indexBalance,\n    daiBalance,\n    daiBalancePolygon,\n    usdcBalance,\n    usdcBalancePolygon,\n    iethFlipBalance,\n    maticFlipBalancePolygon,\n    imaticFlipBalancePolygon\n  } = useBalances();\n  const {\n    account,\n    ethereum,\n    chainId\n  } = useWallet();\n  useEffect(() => {\n    setCurrencyOptions(currencyTokens);\n    setSelectedCurrency(currencyTokens[0]);\n  }, []);\n\n  const getNetworkedBalance = (mainnetBalance, polygonBalance, decimals = 18) => {\n    return chainId && chainId === MAINNET_CHAIN_DATA.chainId ? fromWei(mainnetBalance, decimals) : fromWei(polygonBalance, decimals);\n  }; // eslint-disable-next-line\n\n\n  let spendingTokenBalance = new BigNumber(0);\n\n  if (!isUserBuying && buySellToken === IndexToken.tokenSelector) {\n    spendingTokenBalance = fromWei(indexBalance);\n  } else if (!isUserBuying && buySellToken === DefiPulseIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(dpiBalance, dpiBalancePolygon);\n  } else if (!isUserBuying && buySellToken === Ethereum2xFlexibleLeverageIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(ethfliBalance);\n  } else if (!isUserBuying && buySellToken === Ethereum2xFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(ethflipBalance);\n  } else if (!isUserBuying && buySellToken === IEthereumFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(iethFlipBalance);\n  } else if (!isUserBuying && buySellToken === Matic2xFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(maticFlipBalancePolygon);\n  } else if (!isUserBuying && buySellToken === IMaticFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(imaticFlipBalancePolygon);\n  } else if (!isUserBuying && buySellToken === Bitcoin2xFlexibleLeverageIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(btcfliBalance);\n  } else if (!isUserBuying && buySellToken === MetaverseIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(mviBalance, mviBalancePolygon);\n  } else if (!isUserBuying && buySellToken === BedIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(bedBalance);\n  } else if (!isUserBuying && buySellToken === GmiIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(gmiBalance);\n  } else if (!isUserBuying && buySellToken === DataIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(dataBalance, dataBalancePolygon);\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'ETH') {\n    spendingTokenBalance = getNetworkedBalance(ethBalance, wethBalancePolygon);\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'DAI') {\n    spendingTokenBalance = getNetworkedBalance(daiBalance, daiBalancePolygon);\n  } else if ((selectedCurrency === null || selectedCurrency === void 0 ? void 0 : selectedCurrency.label) === 'USDC') {\n    spendingTokenBalance = getNetworkedBalance(usdcBalance, usdcBalancePolygon, 6);\n  }\n\n  useEffect(() => {\n    if (!buySellQuantity) return;\n    setIsFetchingOrderData(true);\n    const isExactInputTrade = !isUserBuying || activeField === 'currency';\n    getZeroExTradeData(isExactInputTrade, isUserBuying, selectedCurrency.label || '', buySellToken || '', buySellQuantity || '', chainId || 1).then(data => {\n      setZeroExTradeData(data);\n      setIsFetchingOrderData(false);\n    });\n  }, [isUserBuying, selectedCurrency, activeField, buySellToken, buySellQuantity, chainId]);\n  const onExecuteBuySell = useCallback(async () => {\n    if (!account || !(zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.sellAmount) || !selectedCurrency) return;\n    let requiredBalance = selectedCurrency === 'usdc' ? fromWei(new BigNumber(zeroExTradeData.sellAmount), 6) : fromWei(new BigNumber(zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.sellAmount));\n    if (spendingTokenBalance.lt(requiredBalance)) return;\n    const web3 = new Web3(ethereum);\n    zeroExTradeData.from = account;\n    zeroExTradeData.gas = undefined; // use metamask estimated gas limit\n\n    try {\n      var _window, _window$localStorage;\n\n      const tx = web3.eth.sendTransaction(zeroExTradeData);\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING);\n      const response = await tx;\n      onSetTransactionId(response.transactionHash);\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING);\n      const isSuccessful = await waitTransaction(ethereum, response.transactionHash);\n      const referralCode = ((_window = window) === null || _window === void 0 ? void 0 : (_window$localStorage = _window.localStorage) === null || _window$localStorage === void 0 ? void 0 : _window$localStorage.getItem('referral')) || '';\n\n      if (isSuccessful) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED);\n        trackReferral(referralCode, response.transactionHash, 'COMPLETED', selectedCurrency, buySellToken, isUserBuying);\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n        trackReferral(referralCode, response.transactionHash, 'PENDING OR FAILED', selectedCurrency, buySellToken, isUserBuying);\n      }\n    } catch (e) {\n      // There is a problem here where any error that gets triggered will make it seem like\n      // the transaction failed. For example, the wallet continually polls the chain but fails\n      // to make the network request. The transaction may not have failed, but it would have\n      // triggered this error state.\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED);\n    }\n  }, [account, isUserBuying, selectedCurrency, buySellToken, ethereum, onSetTransactionId, onSetTransactionStatus, spendingTokenBalance, zeroExTradeData]);\n\n  const onToggleIsUserBuying = () => {\n    // If the user is switching to sell, ensure `set` field can only be selected.\n    if (isUserBuying) {\n      onSetActiveField('set');\n    }\n\n    setIsUserBuying(!isUserBuying);\n  };\n\n  const onSetActiveField = field => {\n    setActiveField(field);\n    if (!isUserBuying) return; // set BuySellQuantity to the correct value\n\n    if (field === 'set') {\n      setBuySellQuantity((zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.displayBuyAmount.toFixed(6)) || '');\n    } else {\n      setBuySellQuantity((zeroExTradeData === null || zeroExTradeData === void 0 ? void 0 : zeroExTradeData.displaySellAmount.toFixed(6)) || '');\n    }\n  };\n\n  const onSetBuySellQuantity = amount => {\n    setBuySellQuantity(amount);\n  };\n\n  const onSetSelectedCurrency = currency => {\n    setSelectedCurrency(currency);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BuySellContext.Provider, {\n    value: {\n      buySellToken,\n      isFetchingOrderData,\n      isUserBuying,\n      activeField,\n      selectedCurrency,\n      spendingTokenBalance,\n      zeroExTradeData,\n      currencyOptions,\n      buySellQuantity,\n      onSetBuySellToken: setBuySellToken,\n      onToggleIsUserBuying,\n      onSetActiveField,\n      onSetSelectedCurrency,\n      onSetBuySellQuantity,\n      onExecuteBuySell\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuySellProvider, \"goQFl+E2MuAn0aionivT/QX9EA0=\", false, function () {\n  return [useTransactionWatcher, useBalances, useWallet];\n});\n\n_c = BuySellProvider;\nexport default BuySellProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuySellProvider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/BuySell/BuySellProvider.tsx"],"names":["React","useCallback","useEffect","useState","Web3","currencyTokens","BedIndex","Bitcoin2xFlexibleLeverageIndex","DataIndex","Ethereum2xFlexibleLeverageIndex","Ethereum2xFLIP","GmiIndex","IEthereumFLIP","IMaticFLIP","Matic2xFLIP","TransactionStatusType","useBalances","useTransactionWatcher","useWallet","BigNumber","MAINNET_CHAIN_DATA","fromWei","waitTransaction","trackReferral","getZeroExTradeData","BuySellContext","BuySellProvider","children","buySellToken","setBuySellToken","isFetchingOrderData","setIsFetchingOrderData","isUserBuying","setIsUserBuying","activeField","setActiveField","buySellQuantity","setBuySellQuantity","selectedCurrency","setSelectedCurrency","zeroExTradeData","setZeroExTradeData","currencyOptions","setCurrencyOptions","onSetTransactionId","onSetTransactionStatus","ethBalance","wethBalancePolygon","dpiBalance","dpiBalancePolygon","mviBalance","mviBalancePolygon","bedBalance","gmiBalance","dataBalance","dataBalancePolygon","ethfliBalance","ethflipBalance","btcfliBalance","indexBalance","daiBalance","daiBalancePolygon","usdcBalance","usdcBalancePolygon","iethFlipBalance","maticFlipBalancePolygon","imaticFlipBalancePolygon","account","ethereum","chainId","getNetworkedBalance","mainnetBalance","polygonBalance","decimals","spendingTokenBalance","IndexToken","tokenSelector","DefiPulseIndex","MetaverseIndex","label","isExactInputTrade","then","data","onExecuteBuySell","sellAmount","requiredBalance","lt","web3","from","gas","undefined","tx","eth","sendTransaction","IS_APPROVING","response","transactionHash","IS_PENDING","isSuccessful","referralCode","window","localStorage","getItem","IS_COMPLETED","IS_FAILED","e","onToggleIsUserBuying","onSetActiveField","field","displayBuyAmount","toFixed","displaySellAmount","onSetBuySellQuantity","amount","onSetSelectedCurrency","currency","onSetBuySellToken"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\n\nimport Web3 from 'web3'\nimport { provider } from 'web3-core'\n\nimport { currencyTokens } from 'constants/currencyTokens'\nimport {\n  BedIndex,\n  Bitcoin2xFlexibleLeverageIndex,\n  DataIndex,\n  WLKRInnovation, // Added WLKR\n  Ethereum2xFlexibleLeverageIndex,\n  Ethereum2xFLIP,\n  GmiIndex,\n  IEthereumFLIP,\n  IMaticFLIP,\n  WalkerToken, // Added WLKRR\n  Matic2xFLIP,\n  CandleToken, // Added CNDL\n} from 'constants/productTokens'\nimport { TransactionStatusType } from 'contexts/TransactionWatcher'\nimport useBalances from 'hooks/useBalances'\nimport useTransactionWatcher from 'hooks/useTransactionWatcher'\nimport useWallet from 'hooks/useWallet'\nimport BigNumber from 'utils/bignumber'\nimport { MAINNET_CHAIN_DATA } from 'utils/connectors'\nimport { fromWei, waitTransaction } from 'utils/index'\nimport trackReferral from 'utils/referralApi'\nimport { getZeroExTradeData } from 'utils/zeroExUtils'\n\nimport BuySellContext from './BuySellContext'\nimport { ZeroExData } from './types'\n\nconst BuySellProvider: React.FC = ({ children }) => {\n  const [buySellToken, setBuySellToken] = useState<string>('dpi')\n  const [isFetchingOrderData, setIsFetchingOrderData] = useState<boolean>(false)\n  const [isUserBuying, setIsUserBuying] = useState<boolean>(true)\n  const [activeField, setActiveField] = useState<'currency' | 'set'>('currency')\n  const [buySellQuantity, setBuySellQuantity] = useState<string>('')\n  const [selectedCurrency, setSelectedCurrency] = useState<any>()\n  const [zeroExTradeData, setZeroExTradeData] = useState<ZeroExData>()\n  const [currencyOptions, setCurrencyOptions] = useState<any[]>([])\n\n  const { onSetTransactionId, onSetTransactionStatus } = useTransactionWatcher()\n\n  const {\n    ethBalance,\n    wethBalancePolygon,\n    dpiBalance,\n    dpiBalancePolygon,\n    mviBalance,\n    mviBalancePolygon,\n    bedBalance,\n    gmiBalance,\n    dataBalance,\n    dataBalancePolygon,\n    ethfliBalance,\n    ethflipBalance,\n    btcfliBalance,\n    indexBalance,\n    daiBalance,\n    daiBalancePolygon,\n    usdcBalance,\n    usdcBalancePolygon,\n    iethFlipBalance,\n    maticFlipBalancePolygon,\n    imaticFlipBalancePolygon,\n  } = useBalances()\n\n  const { account, ethereum, chainId } = useWallet()\n\n  useEffect(() => {\n    setCurrencyOptions(currencyTokens)\n    setSelectedCurrency(currencyTokens[0])\n  }, [])\n\n  const getNetworkedBalance = (\n    mainnetBalance: any,\n    polygonBalance: any,\n    decimals: number = 18\n  ) => {\n    return chainId && chainId === MAINNET_CHAIN_DATA.chainId\n      ? fromWei(mainnetBalance, decimals)\n      : fromWei(polygonBalance, decimals)\n  }\n\n  // eslint-disable-next-line\n  let spendingTokenBalance = new BigNumber(0)\n  if (!isUserBuying && buySellToken === IndexToken.tokenSelector) {\n    spendingTokenBalance = fromWei(indexBalance)\n  } else if (!isUserBuying && buySellToken === DefiPulseIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(dpiBalance, dpiBalancePolygon)\n  } else if (\n    !isUserBuying &&\n    buySellToken === Ethereum2xFlexibleLeverageIndex.tokenSelector\n  ) {\n    spendingTokenBalance = fromWei(ethfliBalance)\n  } else if (!isUserBuying && buySellToken === Ethereum2xFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(ethflipBalance)\n  } else if (!isUserBuying && buySellToken === IEthereumFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(iethFlipBalance)\n  } else if (!isUserBuying && buySellToken === Matic2xFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(maticFlipBalancePolygon)\n  } else if (!isUserBuying && buySellToken === IMaticFLIP.tokenSelector) {\n    spendingTokenBalance = fromWei(imaticFlipBalancePolygon)\n  } else if (\n    !isUserBuying &&\n    buySellToken === Bitcoin2xFlexibleLeverageIndex.tokenSelector\n  ) {\n    spendingTokenBalance = fromWei(btcfliBalance)\n  } else if (!isUserBuying && buySellToken === MetaverseIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(mviBalance, mviBalancePolygon)\n  } else if (!isUserBuying && buySellToken === BedIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(bedBalance)\n  } else if (!isUserBuying && buySellToken === GmiIndex.tokenSelector) {\n    spendingTokenBalance = fromWei(gmiBalance)\n  } else if (!isUserBuying && buySellToken === DataIndex.tokenSelector) {\n    spendingTokenBalance = getNetworkedBalance(dataBalance, dataBalancePolygon)\n  } else if (selectedCurrency?.label === 'ETH') {\n    spendingTokenBalance = getNetworkedBalance(ethBalance, wethBalancePolygon)\n  } else if (selectedCurrency?.label === 'DAI') {\n    spendingTokenBalance = getNetworkedBalance(daiBalance, daiBalancePolygon)\n  } else if (selectedCurrency?.label === 'USDC') {\n    spendingTokenBalance = getNetworkedBalance(\n      usdcBalance,\n      usdcBalancePolygon,\n      6\n    )\n  }\n\n  useEffect(() => {\n    if (!buySellQuantity) return\n\n    setIsFetchingOrderData(true)\n\n    const isExactInputTrade = !isUserBuying || activeField === 'currency'\n\n    getZeroExTradeData(\n      isExactInputTrade,\n      isUserBuying,\n      selectedCurrency.label || '',\n      buySellToken || '',\n      buySellQuantity || '',\n      chainId || 1\n    ).then((data) => {\n      setZeroExTradeData(data)\n      setIsFetchingOrderData(false)\n    })\n  }, [\n    isUserBuying,\n    selectedCurrency,\n    activeField,\n    buySellToken,\n    buySellQuantity,\n    chainId,\n  ])\n\n  const onExecuteBuySell = useCallback(async () => {\n    if (!account || !zeroExTradeData?.sellAmount || !selectedCurrency) return\n\n    let requiredBalance =\n      selectedCurrency === 'usdc'\n        ? fromWei(new BigNumber(zeroExTradeData.sellAmount), 6)\n        : fromWei(new BigNumber(zeroExTradeData?.sellAmount))\n\n    if (spendingTokenBalance.lt(requiredBalance)) return\n\n    const web3 = new Web3(ethereum)\n\n    zeroExTradeData.from = account\n    zeroExTradeData.gas = undefined // use metamask estimated gas limit\n    try {\n      const tx = web3.eth.sendTransaction(zeroExTradeData)\n      onSetTransactionStatus(TransactionStatusType.IS_APPROVING)\n\n      const response = await tx\n\n      onSetTransactionId(response.transactionHash)\n      onSetTransactionStatus(TransactionStatusType.IS_PENDING)\n\n      const isSuccessful = await waitTransaction(\n        ethereum,\n        response.transactionHash\n      )\n      const referralCode = window?.localStorage?.getItem('referral') || ''\n\n      if (isSuccessful) {\n        onSetTransactionStatus(TransactionStatusType.IS_COMPLETED)\n        trackReferral(\n          referralCode,\n          response.transactionHash,\n          'COMPLETED',\n          selectedCurrency,\n          buySellToken,\n          isUserBuying\n        )\n      } else {\n        onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n        trackReferral(\n          referralCode,\n          response.transactionHash,\n          'PENDING OR FAILED',\n          selectedCurrency,\n          buySellToken,\n          isUserBuying\n        )\n      }\n    } catch (e) {\n      // There is a problem here where any error that gets triggered will make it seem like\n      // the transaction failed. For example, the wallet continually polls the chain but fails\n      // to make the network request. The transaction may not have failed, but it would have\n      // triggered this error state.\n      onSetTransactionStatus(TransactionStatusType.IS_FAILED)\n    }\n  }, [\n    account,\n    isUserBuying,\n    selectedCurrency,\n    buySellToken,\n    ethereum,\n    onSetTransactionId,\n    onSetTransactionStatus,\n    spendingTokenBalance,\n    zeroExTradeData,\n  ])\n\n  const onToggleIsUserBuying = () => {\n    // If the user is switching to sell, ensure `set` field can only be selected.\n    if (isUserBuying) {\n      onSetActiveField('set')\n    }\n    setIsUserBuying(!isUserBuying)\n  }\n\n  const onSetActiveField = (field: 'currency' | 'set') => {\n    setActiveField(field)\n\n    if (!isUserBuying) return\n\n    // set BuySellQuantity to the correct value\n    if (field === 'set') {\n      setBuySellQuantity(zeroExTradeData?.displayBuyAmount.toFixed(6) || '')\n    } else {\n      setBuySellQuantity(zeroExTradeData?.displaySellAmount.toFixed(6) || '')\n    }\n  }\n\n  const onSetBuySellQuantity = (amount: string) => {\n    setBuySellQuantity(amount)\n  }\n\n  const onSetSelectedCurrency = (currency: string) => {\n    setSelectedCurrency(currency)\n  }\n\n  return (\n    <BuySellContext.Provider\n      value={{\n        buySellToken,\n        isFetchingOrderData,\n        isUserBuying,\n        activeField,\n        selectedCurrency,\n        spendingTokenBalance,\n        zeroExTradeData,\n        currencyOptions,\n        buySellQuantity,\n        onSetBuySellToken: setBuySellToken,\n        onToggleIsUserBuying,\n        onSetActiveField,\n        onSetSelectedCurrency,\n        onSetBuySellQuantity,\n        onExecuteBuySell,\n      }}\n    >\n      {children}\n    </BuySellContext.Provider>\n  )\n}\n\nexport default BuySellProvider\n"]},"metadata":{},"sourceType":"module"}