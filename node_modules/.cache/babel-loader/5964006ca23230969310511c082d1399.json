{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/appwebsite/src/contexts/StreamingFee/StreamingFeeProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { bedTokenAddress, btc2xfliTokenAddress, dpiTokenAddress, dpiTokenPolygonAddress, wlkrTokenAddress, wlkrTokenPolygonAddress, eth2xflipTokenAddress, eth2xfliTokenAddress, gmiTokenAddress, iethflipTokenAddress, imaticflipTokenAddress, matic2xflipTokenAddress, mviTokenAddress, mviTokenPolygonAddress } from 'constants/ethContractAddresses';\nimport useWallet from 'hooks/useWallet';\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors';\nimport { convertToPercentage } from 'utils/ethersBigNumber';\nimport { getStreamingFees } from 'utils/setjsApi';\nimport StreamingFeeContext from './StreamingFeeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StreamingFeeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [dpiStreamingFee, setDpiStreamingFee] = useState();\n  const [wlkrStreamingFee, setWlkrStreamingFee] = useState();\n  const [mviStreamingFee, setMviStreamingFee] = useState();\n  const [bedStreamingFee, setBedStreamingFee] = useState();\n  const [gmiStreamingFee, setGmiStreamingFee] = useState();\n  const [eth2xFliStreamingFee, setEth2xFliStreamingFee] = useState();\n  const [btc2xFliStreamingFee, setBtc2xFliStreamingFee] = useState();\n  const [imaticFlipStreamingFee, setImaticFlipStreamingFee] = useState();\n  const [matic2xFlipStreamingFee, setMatic2xFlipStreamingFee] = useState();\n  const [iethFliStreamingFee, setiEthFliStreamingFee] = useState();\n  const {\n    ethereum: provider,\n    chainId\n  } = useWallet();\n  useEffect(() => {\n    if (chainId && chainId === MAINNET_CHAIN_DATA.chainId && provider && dpiTokenAddress && wlkrTokenAddress && mviTokenAddress && bedTokenAddress && gmiTokenAddress && eth2xfliTokenAddress && btc2xfliTokenAddress) {\n      getStreamingFees(provider, [dpiTokenAddress, wlkrTokenAddress, mviTokenAddress, bedTokenAddress, gmiTokenAddress, eth2xfliTokenAddress, btc2xfliTokenAddress], chainId).then(result => {\n        const [dpiResult, wlkrResult, mviResult, bedResult, gmiResult, eth2xFliResult, btc2xFliResult] = result;\n        setDpiStreamingFee(convertToPercentage(dpiResult.streamingFeePercentage));\n        setWlkrStreamingFee(convertToPercentage(wlkrResult.streamingFeePercentage));\n        setMviStreamingFee(convertToPercentage(mviResult.streamingFeePercentage));\n        setBedStreamingFee(convertToPercentage(bedResult.streamingFeePercentage));\n        setGmiStreamingFee(convertToPercentage(gmiResult.streamingFeePercentage));\n        setEth2xFliStreamingFee(convertToPercentage(eth2xFliResult.streamingFeePercentage));\n        setBtc2xFliStreamingFee(convertToPercentage(btc2xFliResult.streamingFeePercentage));\n      }).catch(error => console.error(error));\n    } else if (chainId && chainId === POLYGON_CHAIN_DATA.chainId && provider && dpiTokenPolygonAddress && wlkrTokenPolygonAddress && mviTokenPolygonAddress && eth2xflipTokenAddress && matic2xflipTokenAddress && imaticflipTokenAddress && iethflipTokenAddress) {\n      getStreamingFees(provider, [dpiTokenPolygonAddress, wlkrTokenPolygonAddress, mviTokenPolygonAddress, eth2xflipTokenAddress, matic2xflipTokenAddress, imaticflipTokenAddress, iethflipTokenAddress], chainId).then(result => {\n        const [dpiResult, wlkrResult, mviResult, eth2xFlipResult, matic2xFlipResult, imaticFlipResult, iethFlipResult] = result;\n        setDpiStreamingFee(convertToPercentage(dpiResult.streamingFeePercentage));\n        setWlkrStreamingFee(convertToPercentage(wlkrResult.streamingFeePercentage));\n        setMviStreamingFee(convertToPercentage(mviResult.streamingFeePercentage));\n        setEth2xFliStreamingFee(convertToPercentage(eth2xFlipResult.streamingFeePercentage));\n        setMatic2xFlipStreamingFee(convertToPercentage(matic2xFlipResult.streamingFeePercentage));\n        setImaticFlipStreamingFee(convertToPercentage(imaticFlipResult.streamingFeePercentage));\n        setiEthFliStreamingFee(convertToPercentage(iethFlipResult.streamingFeePercentage));\n        setBedStreamingFee(undefined);\n        setGmiStreamingFee(undefined);\n        setEth2xFliStreamingFee(undefined);\n        setBtc2xFliStreamingFee(undefined);\n      }).catch(error => console.error(error));\n    }\n  }, [chainId, provider]);\n  return /*#__PURE__*/_jsxDEV(StreamingFeeContext.Provider, {\n    value: {\n      dpiStreamingFee: dpiStreamingFee,\n      wlkrStreamingFee: wlkrStreamingFee,\n      // Added WLKR\n      mviStreamingFee: mviStreamingFee,\n      bedStreamingFee: bedStreamingFee,\n      gmiStreamingFee: gmiStreamingFee,\n      eth2xFliStreamingFee: eth2xFliStreamingFee,\n      btc2xFliStreamingFee: btc2xFliStreamingFee,\n      imaticFLIPStreamingFee: imaticFlipStreamingFee,\n      matic2xFLIPStreamingFee: matic2xFlipStreamingFee,\n      iethFLIPStreamingFee: iethFliStreamingFee\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StreamingFeeProvider, \"3ouohiS+lhL3DDP2jh5MH0xw4kc=\", false, function () {\n  return [useWallet];\n});\n\n_c = StreamingFeeProvider;\nexport default StreamingFeeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StreamingFeeProvider\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/appwebsite/src/contexts/StreamingFee/StreamingFeeProvider.tsx"],"names":["React","useEffect","useState","bedTokenAddress","btc2xfliTokenAddress","dpiTokenAddress","dpiTokenPolygonAddress","wlkrTokenAddress","wlkrTokenPolygonAddress","eth2xflipTokenAddress","eth2xfliTokenAddress","gmiTokenAddress","iethflipTokenAddress","imaticflipTokenAddress","matic2xflipTokenAddress","mviTokenAddress","mviTokenPolygonAddress","useWallet","MAINNET_CHAIN_DATA","POLYGON_CHAIN_DATA","convertToPercentage","getStreamingFees","StreamingFeeContext","StreamingFeeProvider","children","dpiStreamingFee","setDpiStreamingFee","wlkrStreamingFee","setWlkrStreamingFee","mviStreamingFee","setMviStreamingFee","bedStreamingFee","setBedStreamingFee","gmiStreamingFee","setGmiStreamingFee","eth2xFliStreamingFee","setEth2xFliStreamingFee","btc2xFliStreamingFee","setBtc2xFliStreamingFee","imaticFlipStreamingFee","setImaticFlipStreamingFee","matic2xFlipStreamingFee","setMatic2xFlipStreamingFee","iethFliStreamingFee","setiEthFliStreamingFee","ethereum","provider","chainId","then","result","dpiResult","wlkrResult","mviResult","bedResult","gmiResult","eth2xFliResult","btc2xFliResult","streamingFeePercentage","catch","error","console","eth2xFlipResult","matic2xFlipResult","imaticFlipResult","iethFlipResult","undefined","imaticFLIPStreamingFee","matic2xFLIPStreamingFee","iethFLIPStreamingFee"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport {\n  bedTokenAddress,\n  btc2xfliTokenAddress,\n  dpiTokenAddress,\n  dpiTokenPolygonAddress,\n  wlkrTokenAddress,\n  wlkrTokenPolygonAddress,\n  eth2xflipTokenAddress,\n  eth2xfliTokenAddress,\n  gmiTokenAddress,\n  gmiTokenPolygonAddress,\n  iethflipTokenAddress,\n  imaticflipTokenAddress,\n  matic2xflipTokenAddress,\n  mviTokenAddress,\n  mviTokenPolygonAddress,\n} from 'constants/ethContractAddresses'\nimport useWallet from 'hooks/useWallet'\nimport { MAINNET_CHAIN_DATA, POLYGON_CHAIN_DATA } from 'utils/connectors'\nimport { convertToPercentage } from 'utils/ethersBigNumber'\nimport { getStreamingFees } from 'utils/setjsApi'\n\nimport StreamingFeeContext from './StreamingFeeContext'\n\nconst StreamingFeeProvider: React.FC = ({ children }) => {\n  const [dpiStreamingFee, setDpiStreamingFee] = useState<string>()\n  const [wlkrStreamingFee, setWlkrStreamingFee] = useState<string>()\n  const [mviStreamingFee, setMviStreamingFee] = useState<string>()\n  const [bedStreamingFee, setBedStreamingFee] = useState<string>()\n  const [gmiStreamingFee, setGmiStreamingFee] = useState<string>()\n  const [eth2xFliStreamingFee, setEth2xFliStreamingFee] = useState<string>()\n  const [btc2xFliStreamingFee, setBtc2xFliStreamingFee] = useState<string>()\n  const [imaticFlipStreamingFee, setImaticFlipStreamingFee] = useState<string>()\n  const [matic2xFlipStreamingFee, setMatic2xFlipStreamingFee] =\n    useState<string>()\n  const [iethFliStreamingFee, setiEthFliStreamingFee] = useState<string>()\n\n  const { ethereum: provider, chainId } = useWallet()\n\n  useEffect(() => {\n    if (\n      chainId &&\n      chainId === MAINNET_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenAddress &&\n      wlkrTokenAddress &&\n      mviTokenAddress &&\n      bedTokenAddress &&\n      gmiTokenAddress &&\n      eth2xfliTokenAddress &&\n      btc2xfliTokenAddress\n    ) {\n      getStreamingFees(\n        provider,\n        [\n          dpiTokenAddress,\n          wlkrTokenAddress,\n          mviTokenAddress,\n          bedTokenAddress,\n          gmiTokenAddress,\n          eth2xfliTokenAddress,\n          btc2xfliTokenAddress,\n        ],\n        chainId\n      )\n        .then((result) => {\n          const [\n            dpiResult,\n            wlkrResult,\n            mviResult,\n            bedResult,\n            gmiResult,\n            eth2xFliResult,\n            btc2xFliResult,\n          ] = result\n          setDpiStreamingFee(\n            convertToPercentage(dpiResult.streamingFeePercentage)\n          )\n          setWlkrStreamingFee(\n            convertToPercentage(wlkrResult.streamingFeePercentage)\n          )\n          setMviStreamingFee(\n            convertToPercentage(mviResult.streamingFeePercentage)\n          )\n          setBedStreamingFee(\n            convertToPercentage(bedResult.streamingFeePercentage)\n          )\n          setGmiStreamingFee(\n            convertToPercentage(gmiResult.streamingFeePercentage)\n          )\n          setEth2xFliStreamingFee(\n            convertToPercentage(eth2xFliResult.streamingFeePercentage)\n          )\n          setBtc2xFliStreamingFee(\n            convertToPercentage(btc2xFliResult.streamingFeePercentage)\n          )\n        })\n        .catch((error: any) => console.error(error))\n    } else if (\n      chainId &&\n      chainId === POLYGON_CHAIN_DATA.chainId &&\n      provider &&\n      dpiTokenPolygonAddress &&\n      wlkrTokenPolygonAddress &&\n      mviTokenPolygonAddress &&\n      eth2xflipTokenAddress &&\n      matic2xflipTokenAddress &&\n      imaticflipTokenAddress &&\n      iethflipTokenAddress\n    ) {\n      getStreamingFees(\n        provider,\n        [\n          dpiTokenPolygonAddress,\n          wlkrTokenPolygonAddress,\n          mviTokenPolygonAddress,\n          eth2xflipTokenAddress,\n          matic2xflipTokenAddress,\n          imaticflipTokenAddress,\n          iethflipTokenAddress,\n        ],\n        chainId\n      )\n        .then((result) => {\n          const [\n            dpiResult,\n            wlkrResult,\n            mviResult,\n            eth2xFlipResult,\n            matic2xFlipResult,\n            imaticFlipResult,\n            iethFlipResult,\n          ] = result\n          setDpiStreamingFee(\n            convertToPercentage(dpiResult.streamingFeePercentage)\n          )\n          setWlkrStreamingFee(\n            convertToPercentage(wlkrResult.streamingFeePercentage)\n          )\n          setMviStreamingFee(\n            convertToPercentage(mviResult.streamingFeePercentage)\n          )\n          setEth2xFliStreamingFee(\n            convertToPercentage(eth2xFlipResult.streamingFeePercentage)\n          )\n          setMatic2xFlipStreamingFee(\n            convertToPercentage(matic2xFlipResult.streamingFeePercentage)\n          )\n          setImaticFlipStreamingFee(\n            convertToPercentage(imaticFlipResult.streamingFeePercentage)\n          )\n          setiEthFliStreamingFee(\n            convertToPercentage(iethFlipResult.streamingFeePercentage)\n          )\n          setBedStreamingFee(undefined)\n          setGmiStreamingFee(undefined)\n          setEth2xFliStreamingFee(undefined)\n          setBtc2xFliStreamingFee(undefined)\n        })\n        .catch((error: any) => console.error(error))\n    }\n  }, [chainId, provider])\n\n  return (\n    <StreamingFeeContext.Provider\n      value={{\n        dpiStreamingFee: dpiStreamingFee,\n        wlkrStreamingFee: wlkrStreamingFee, // Added WLKR\n        mviStreamingFee: mviStreamingFee,\n        bedStreamingFee: bedStreamingFee,\n        gmiStreamingFee: gmiStreamingFee,\n        eth2xFliStreamingFee: eth2xFliStreamingFee,\n        btc2xFliStreamingFee: btc2xFliStreamingFee,\n        imaticFLIPStreamingFee: imaticFlipStreamingFee,\n        matic2xFLIPStreamingFee: matic2xFlipStreamingFee,\n        iethFLIPStreamingFee: iethFliStreamingFee,\n      }}\n    >\n      {children}\n    </StreamingFeeContext.Provider>\n  )\n}\n\nexport default StreamingFeeProvider\n"]},"metadata":{},"sourceType":"module"}